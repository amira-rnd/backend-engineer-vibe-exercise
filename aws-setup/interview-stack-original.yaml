AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amira Learning - Interview Environment (Public Access for RDS/Redis)'

Parameters:
  InterviewId:
    Type: String
    Description: Unique identifier for this interview session
    Default: default
  CandidateName:
    Type: String
    Description: Candidate name for resource naming
    Default: candidate

Resources:
  # Challenge A: DynamoDB Tables for Migration Exercise
  StudentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${InterviewId}-students'
      AttributeDefinitions:
        - AttributeName: student_id
          AttributeType: S
        - AttributeName: class_id
          AttributeType: S
      KeySchema:
        - AttributeName: student_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: class-index
          KeySchema:
            - AttributeName: class_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Purpose
          Value: VibeInterview
        - Key: InterviewId
          Value: !Ref InterviewId

  AssessmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${InterviewId}-assessments'
      AttributeDefinitions:
        - AttributeName: assessment_id
          AttributeType: S
        - AttributeName: student_id
          AttributeType: S
      KeySchema:
        - AttributeName: assessment_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: student-index
          KeySchema:
            - AttributeName: student_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Purpose
          Value: VibeInterview

  ClassesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${InterviewId}-classes'
      AttributeDefinitions:
        - AttributeName: class_id
          AttributeType: S
      KeySchema:
        - AttributeName: class_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Purpose
          Value: VibeInterview

  SchoolsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${InterviewId}-schools'
      AttributeDefinitions:
        - AttributeName: school_id
          AttributeType: S
      KeySchema:
        - AttributeName: school_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Purpose
          Value: VibeInterview

  # Challenge B: Lambda Function with Intentional Memory Leak
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${InterviewId}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt StudentsTable.Arn
                  - !GetAtt AssessmentsTable.Arn
                  - !Sub '${StudentsTable.Arn}/index/*'
                  - !Sub '${AssessmentsTable.Arn}/index/*'

  BuggyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${InterviewId}-buggy-api'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Code:
        ZipFile: |
          // GraphQL API Lambda Function
          const AWS = require('aws-sdk');
          const dynamodb = new AWS.DynamoDB.DocumentClient();

          // Connection pool for reuse across requests
          const connections = [];
          let requestCache = new Map();

          exports.handler = async (event) => {
              try {
                  // Create connection for this request
                  const requestId = Date.now();
                  connections.push({
                      id: requestId,
                      client: new AWS.DynamoDB.DocumentClient(),
                      requestData: new Array(1000).fill(`request-${requestId}`)
                  });

                  // Cache request for performance
                  const cacheKey = `query-${requestId}-${Math.random()}`;
                  requestCache.set(cacheKey, {
                      queryData: new Array(5000).fill(`cached-query-${requestId}`),
                      timestamp: Date.now()
                  });

                  console.log(`Active connections: ${connections.length}`);
                  console.log(`Cached queries: ${requestCache.size}`);

                  // Get student data
                  const result = await dynamodb.scan({
                      TableName: process.env.STUDENTS_TABLE,
                      Limit: 10
                  }).promise();

                  return {
                      statusCode: 200,
                      body: JSON.stringify({
                          message: 'Student data retrieved successfully',
                          activeConnections: connections.length,
                          cachedQueries: requestCache.size,
                          studentsFound: result.Items?.length || 0
                      })
                  };
              } catch (error) {
                  console.error('Error processing request:', error);
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ error: error.message })
                  };
              }
          };
      Environment:
        Variables:
          STUDENTS_TABLE: !Ref StudentsTable
          ASSESSMENTS_TABLE: !Ref AssessmentsTable
          DB_ENDPOINT: !GetAtt DatabaseInstance.Endpoint.Address
          REDIS_ENDPOINT: !GetAtt CacheCluster.RedisEndpoint.Address
      MemorySize: 128
      Timeout: 30
      Tags:
        - Key: Purpose
          Value: VibeInterview

  # Sample Data API for Candidates
  SampleDataFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${InterviewId}-sample-data-api'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const schemas = "-- Amira Learning Database Schema\n" +
                  "-- Current Production Schema (PostgreSQL)\n\n" +
                  "CREATE TABLE districts (\n" +
                  "    district_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n" +
                  "    name VARCHAR(255) NOT NULL,\n" +
                  "    state VARCHAR(2) NOT NULL,\n" +
                  "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n" +
                  ");\n\n" +
                  "CREATE TABLE schools (\n" +
                  "    school_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n" +
                  "    district_id UUID REFERENCES districts(district_id),\n" +
                  "    name VARCHAR(255) NOT NULL,\n" +
                  "    type VARCHAR(50),\n" +
                  "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n" +
                  ");\n\n" +
                  "CREATE TABLE students (\n" +
                  "    student_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n" +
                  "    class_id UUID REFERENCES classes(class_id),\n" +
                  "    first_name VARCHAR(100),\n" +
                  "    last_name VARCHAR(100),\n" +
                  "    grade_level INTEGER CHECK (grade_level >= 0 AND grade_level <= 12),\n" +
                  "    reading_level DECIMAL(3,1),\n" +
                  "    status VARCHAR(20) DEFAULT 'ACTIVE',\n" +
                  "    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n" +
                  ");";

              const legacyApi = "# Legacy API Documentation\n\n" +
                  "## Students Endpoint\n" +
                  "GET /api/v1/students\n\n" +
                  "Returns array of student records with the following issues:\n" +
                  "- Grade levels as text (Third, Fourth) instead of numbers\n" +
                  "- Negative reading levels\n" +
                  "- NULL reading levels\n" +
                  "- Inconsistent field naming\n\n" +
                  "Example Response:\n" +
                  '```json\n[\n  {\n    "StudentID": 123,\n    "FirstName": "Sarah",\n    "LastName": "Johnson",\n    "Grade": "Third",\n    "ReadingLevel": 3.2,\n    "Status": "Active"\n  }\n]\n```\n\n' +
                  "## Migration Notes\n" +
                  "- Clean data quality issues\n" +
                  "- Standardize field formats\n" +
                  "- Generate new UUIDs for DynamoDB";

              const testData = {
                  "legacy_students": [
                      {
                          "StudentID": 123,
                          "FirstName": "Sarah",
                          "LastName": "Johnson",
                          "Grade": "Third",
                          "ReadingLevel": 3.2,
                          "Status": "Active"
                      },
                      {
                          "StudentID": 124,
                          "FirstName": "Mike",
                          "LastName": "Wilson",
                          "Grade": "3rd",
                          "ReadingLevel": -1.0,
                          "Status": "ACTIVE"
                      },
                      {
                          "StudentID": 125,
                          "FirstName": "Emma",
                          "LastName": "Davis",
                          "Grade": "Third",
                          "ReadingLevel": null,
                          "Status": "active"
                      }
                  ]
              };

              const file = (event.pathParameters && event.pathParameters.file) ||
                          (event.queryStringParameters && event.queryStringParameters.file);

              if (file === 'schemas.sql') {
                  return {
                      statusCode: 200,
                      headers: { 'Content-Type': 'text/plain' },
                      body: schemas
                  };
              } else if (file === 'legacy-api-docs.md') {
                  return {
                      statusCode: 200,
                      headers: { 'Content-Type': 'text/plain' },
                      body: legacyApi
                  };
              } else if (file === 'test-data.json') {
                  return {
                      statusCode: 200,
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify(testData, null, 2)
                  };
              } else {
                  return {
                      statusCode: 200,
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                          message: 'Sample Data API for Interview',
                          available_files: [
                              'schemas.sql',
                              'legacy-api-docs.md',
                              'test-data.json'
                          ],
                          usage: 'Add ?file=filename to URL'
                      })
                  };
              }
          };
      MemorySize: 128
      Timeout: 30
      Tags:
        - Key: Purpose
          Value: VibeInterview

  # API Gateway for Sample Data Function
  SampleDataApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${InterviewId}-sample-data-api'
      Description: Sample data API for interview candidates

  SampleDataApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref SampleDataApi
      ParentId: !GetAtt SampleDataApi.RootResourceId
      PathPart: '{proxy+}'

  SampleDataApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SampleDataApi
      ResourceId: !Ref SampleDataApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SampleDataFunction.Arn}/invocations'

  SampleDataApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref SampleDataApi
      ResourceId: !GetAtt SampleDataApi.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SampleDataFunction.Arn}/invocations'

  SampleDataApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - SampleDataApiMethod
      - SampleDataApiRootMethod
    Properties:
      RestApiId: !Ref SampleDataApi
      StageName: prod

  SampleDataApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SampleDataFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SampleDataApi}/*/*'

  # Challenge C: RDS for Performance Exercise (PUBLIC ACCESS)
  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Parameter group for interview database with connection limits
      Family: postgres15
      Parameters:
        max_connections: "25"
        shared_preload_libraries: "pg_stat_statements"
        log_statement: "all"
        log_min_duration_statement: "1000"
      Tags:
        - Key: Purpose
          Value: VibeInterview

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for interview RDS (public subnets for accessibility)
      SubnetIds:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
      Tags:
        - Key: Purpose
          Value: VibeInterview

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub 'db-${InterviewId}-performance'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '15.14'
      MasterUsername: postgres
      MasterUserPassword: !Sub 'AmiraInterview${InterviewId}${AWS::AccountId}!'
      AllocatedStorage: 20
      StorageType: gp2
      StorageEncrypted: false
      DBParameterGroupName: !Ref DBParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      BackupRetentionPeriod: 0
      MultiAZ: false
      PubliclyAccessible: true  # CHANGED: Now publicly accessible
      DeletionProtection: false
      Tags:
        - Key: Purpose
          Value: VibeInterview

  # Challenge C: ElastiCache Redis (PUBLIC ACCESS with AUTH)
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for interview cache (public subnets)
      SubnetIds:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2

  CacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: redis
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref CacheSecurityGroup
      Tags:
        - Key: Purpose
          Value: VibeInterview

  # VPC and Networking (Simplified with Public Access)
  InterviewVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${InterviewId}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${InterviewId}-igw'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref InterviewVPC
      InternetGatewayId: !Ref InternetGateway

  # Public subnets for RDS/Redis accessibility
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InterviewVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${InterviewId}-public-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InterviewVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${InterviewId}-public-2'

  # Private subnets for Lambda
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InterviewVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${InterviewId}-private-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref InterviewVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${InterviewId}-private-2'

  # NAT Gateway for Lambda internet access
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InterviewVPC
      Tags:
        - Key: Name
          Value: !Sub '${InterviewId}-public-routes'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref InterviewVPC
      Tags:
        - Key: Name
          Value: !Sub '${InterviewId}-private-routes'

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups (PUBLIC ACCESS with restrictions)
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS instance (public access)
      VpcId: !Ref InterviewVPC
      SecurityGroupIngress:
        # Allow from anywhere for interview access
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
          Description: "Public PostgreSQL access for interview"
        # Allow from Lambda
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: "Lambda access"
      Tags:
        - Key: Purpose
          Value: VibeInterview

  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ElastiCache (public access)
      VpcId: !Ref InterviewVPC
      SecurityGroupIngress:
        # Allow from anywhere for interview access
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 0.0.0.0/0
          Description: "Public Redis access for interview"
        # Allow from Lambda
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: "Lambda access"
      Tags:
        - Key: Purpose
          Value: VibeInterview

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref InterviewVPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Purpose
          Value: VibeInterview

  # CloudWatch Alarms for Cost Protection
  DatabaseCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: High CPU usage on interview database
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref DatabaseInstance
      AlarmActions:
        - !Ref CostAlertTopic

  CacheMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: High memory usage on interview cache
      MetricName: DatabaseMemoryUsagePercentage
      Namespace: AWS/ElastiCache
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: CacheClusterId
          Value: !Ref CacheCluster

  # SNS Topic for Cost Alerts
  CostAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${InterviewId}-cost-alerts'
      DisplayName: Interview Cost Alerts

  # Candidate IAM Role
  CandidateRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${InterviewId}-candidate-role'
      MaxSessionDuration: 14400  # 4 hours
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': !Sub '${InterviewId}-${CandidateName}'
      Policies:
        - PolicyName: InterviewSandboxAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:BatchGetItem
                Resource:
                  - !GetAtt StudentsTable.Arn
                  - !GetAtt AssessmentsTable.Arn
                  - !GetAtt ClassesTable.Arn
                  - !GetAtt SchoolsTable.Arn
                  - !Sub '${StudentsTable.Arn}/index/*'
                  - !Sub '${AssessmentsTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                Resource: !GetAtt BuggyLambdaFunction.Arn
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${InterviewId}-*'
              - Effect: Allow
                Action:
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                Resource: '*'
              - Effect: Allow
                Action:
                  - elasticache:DescribeCacheClusters
                  - elasticache:DescribeReplicationGroups
                Resource: '*'
              - Effect: Deny
                Action:
                  - iam:*
                  - sts:*
                  - account:*
                  - billing:*
                  - support:*
                Resource: '*'

Outputs:
  StudentsTableName:
    Description: DynamoDB Students table name
    Value: !Ref StudentsTable

  AssessmentsTableName:
    Description: DynamoDB Assessments table name
    Value: !Ref AssessmentsTable

  ClassesTableName:
    Description: DynamoDB Classes table name
    Value: !Ref ClassesTable

  SchoolsTableName:
    Description: DynamoDB Schools table name
    Value: !Ref SchoolsTable

  BuggyLambdaArn:
    Description: Lambda function with memory leak for debugging
    Value: !GetAtt BuggyLambdaFunction.Arn

  SampleDataApiUrl:
    Description: URL for accessing sample data files
    Value: !Sub 'https://${SampleDataApi}.execute-api.${AWS::Region}.amazonaws.com/prod'

  DatabaseEndpoint:
    Description: RDS instance endpoint (publicly accessible)
    Value: !GetAtt DatabaseInstance.Endpoint.Address

  DatabasePassword:
    Description: Database password for candidate
    Value: !Sub 'AmiraInterview${InterviewId}${AWS::AccountId}!'

  CacheEndpoint:
    Description: ElastiCache Redis endpoint (publicly accessible)
    Value: !GetAtt CacheCluster.RedisEndpoint.Address


  CandidateRoleArn:
    Description: IAM role for candidate access
    Value: !GetAtt CandidateRole.Arn

  InterviewAccessInstructions:
    Description: Complete AWS access instructions for candidate
    Value: !Sub |
      === AMIRA LEARNING INTERVIEW ENVIRONMENT ===

      AWS Role: ${CandidateRole.Arn}
      External ID: ${InterviewId}-${CandidateName}
      Region: ${AWS::Region}

      CHALLENGE A - Data Migration:
      Students Table: ${StudentsTable}
      Assessments Table: ${AssessmentsTable}
      Classes Table: ${ClassesTable}
      Schools Table: ${SchoolsTable}

      CHALLENGE B - Memory Leak Debugging:
      Lambda Function: ${BuggyLambdaFunction}

      CHALLENGE C - Performance Optimization:
      Database: ${DatabaseInstance.Endpoint.Address}
      Database User: postgres
      Database Password: AmiraInterview${InterviewId}${AWS::AccountId}!
      Redis Cache: ${CacheCluster.RedisEndpoint.Address}

      Connection Examples:
      psql -h ${DatabaseInstance.Endpoint.Address} -U postgres -d postgres
      redis-cli -h ${CacheCluster.RedisEndpoint.Address}

      Good luck!